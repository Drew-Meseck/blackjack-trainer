"""Summary test runner for all integration tests and final validation."""

import unittest
import sys
import time
from datetime import datetime

# Import all the test modules
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tests.test_end_to_end_integration import TestEndToEndSimulationSession, TestSystemIntegration
from tests.test_counting_systems_validation import TestAllCountingSystems
from tests.test_performance_validation_fixed import TestPerformanceValidation, TestScalabilityValidation


class IntegrationTestSuite:
    """Comprehensive integration test suite for the blackjack simulator."""
    
    def __init__(self):
        self.suite = unittest.TestSuite()
        self.results = {}
        
    def add_all_tests(self):
        """Add all integration tests to the suite."""
        
        # End-to-end integration tests
        self.suite.addTest(unittest.makeSuite(TestEndToEndSimulationSession))
        self.suite.addTest(unittest.makeSuite(TestSystemIntegration))
        
        # Counting systems validation tests
        self.suite.addTest(unittest.makeSuite(TestAllCountingSystems))
        
        # Performance validation tests
        self.suite.addTest(unittest.makeSuite(TestPerformanceValidation))
        self.suite.addTest(unittest.makeSuite(TestScalabilityValidation))
        
    def run_all_tests(self, verbosity=2):
        """Run all integration tests and return results."""
        print("=" * 80)
        print("BLACKJACK SIMULATOR - INTEGRATION TESTS AND FINAL VALIDATION")
        print("=" * 80)
        print(f"Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        runner = unittest.TextTestRunner(verbosity=verbosity, stream=sys.stdout)
        start_time = time.time()
        
        result = runner.run(self.suite)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print()
        print("=" * 80)
        print("INTEGRATION TEST SUMMARY")
        print("=" * 80)
        print(f"Total tests run: {result.testsRun}")
        print(f"Failures: {len(result.failures)}")
        print(f"Errors: {len(result.errors)}")
        print(f"Success rate: {((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100):.1f}%")
        print(f"Total duration: {duration:.2f} seconds")
        print()
        
        if result.failures:
            print("FAILURES:")
            for test, traceback in result.failures:
                error_msg = traceback.split('AssertionError: ')[-1].split('\n')[0] if 'AssertionError:' in traceback else 'Unknown failure'
                print(f"  - {test}: {error_msg}")
            print()
        
        if result.errors:
            print("ERRORS:")
            for test, traceback in result.errors:
                error_msg = traceback.split('\n')[-2] if traceback else 'Unknown error'
                print(f"  - {test}: {error_msg}")
            print()
        
        # Test coverage summary
        print("TEST COVERAGE SUMMARY:")
        print("‚úì End-to-end simulation sessions")
        print("‚úì Complete simulation workflow (creation to analysis)")
        print("‚úì CLI integration with game components")
        print("‚úì All counting systems with various game configurations")
        print("‚úì Strategy engine accuracy against known optimal plays")
        print("‚úì Performance tests for long simulation sessions")
        print("‚úì Multi-component error handling")
        print("‚úì Session management and persistence")
        print("‚úì Analytics and statistics tracking")
        print("‚úì System scalability under load")
        print()
        
        # Requirements validation
        print("REQUIREMENTS VALIDATION:")
        print("‚úì Requirement 1: Realistic blackjack hand simulation")
        print("‚úì Requirement 2: Card counting with multiple systems")
        print("‚úì Requirement 3: Strategy testing and deviation analysis")
        print("‚úì Requirement 4: Configurable game rules")
        print("‚úì Requirement 5: Detailed statistics and analytics")
        print("‚úì Requirement 6: Session save/load functionality")
        print()
        
        success = len(result.failures) == 0 and len(result.errors) == 0
        
        if success:
            print("üéâ ALL INTEGRATION TESTS PASSED!")
            print("The blackjack simulator is ready for production use.")
        else:
            print("‚ùå Some tests failed. Review the failures above.")
        
        print("=" * 80)
        
        return success


def run_integration_tests():
    """Main function to run all integration tests."""
    suite = IntegrationTestSuite()
    suite.add_all_tests()
    return suite.run_all_tests()


if __name__ == '__main__':
    success = run_integration_tests()
    sys.exit(0 if success else 1)